/*
 Navicat Premium Data Transfer

 Source Server         : PEPEPS
 Source Server Type    : Oracle
 Source Server Version : 120100
 Source Host           : 191.102.85.226:1521
 Source Schema         : USER_CHAIRA

 Target Server Type    : Oracle
 Target Server Version : 120100
 File Encoding         : 65001

 Date: 10/02/2020 14:23:39
*/


-- ----------------------------
-- Table structure for PE_ARCHIVO
-- ----------------------------
DROP TABLE IF EXISTS `PE_ARCHIVO`;
CREATE TABLE `PE_ARCHIVO` (
  `ARC_NOMBRE` VARCHAR(500)  NOT NULL ,
  `ARC_URL` VARCHAR(500)  NOT NULL ,
  `ID_PE_PROYECTO` DOUBLE  ,
  `ID_ARCHIVO` DOUBLE  NOT NULL ,
  `ARC_TIPO` VARCHAR(10)  DEFAULT NULL ,
  `ID_PE_TIPO_DOCUMENTO` DOUBLE  DEFAULT 1  ,
  `ARC_FECHA_CARGA` DATETIME  
)

;

-- ----------------------------
-- Table structure for PE_AREA_TRABAJO
-- ----------------------------
DROP TABLE IF EXISTS `PE_AREA_TRABAJO`;
CREATE TABLE `PE_AREA_TRABAJO` (
  `ID_AREA_TRABAJO` DOUBLE  NOT NULL ,
  `ARTR_NOMBRE` VARCHAR(100)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_DEPENDECIA_PROYECTO
-- ----------------------------
DROP TABLE IF EXISTS `PE_DEPENDECIA_PROYECTO`;
CREATE TABLE `PE_DEPENDECIA_PROYECTO` (
  `ID_DEPENDENCIA_PROYECTO` DOUBLE  NOT NULL ,
  `DEPR_NOMBRE` VARCHAR(200)  NOT NULL ,
  `ID_PE_TIPO_DEPENDENCIA` DOUBLE  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_EVALUACION
-- ----------------------------
DROP TABLE IF EXISTS `PE_EVALUACION`;
CREATE TABLE `PE_EVALUACION` (
  `ID_EVALUACION` DOUBLE  NOT NULL ,
  `EVA_OBSERVACIONES` VARCHAR(4000)  ,
  `ID_PE_PROYECTO` DOUBLE  NOT NULL ,
  `EVA_PUNTAJE_TOTAL` DOUBLE  ,
  `ID_PE_PERSONA` DOUBLE  NOT NULL ,
  `EVA_FECHA` DATETIME  DEFAULT NULL ,
  `EVA_ESTADO` VARCHAR(1)  DEFAULT 0  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_EVALUACION_ITEM
-- ----------------------------
DROP TABLE IF EXISTS `PE_EVALUACION_ITEM`;
CREATE TABLE `PE_EVALUACION_ITEM` (
  `ID_EVALUACION_ITEM` DOUBLE  NOT NULL ,
  `EVIT_PUNTAJE` DOUBLE  ,
  `ID_PE_EVALUACION` DOUBLE  NOT NULL ,
  `ID_PE_ITEM` DOUBLE  NOT NULL ,
  `EVIT_FECHA_CALIFICACION` DATETIME  DEFAULT NULL 
)

;

-- ----------------------------
-- Table structure for PE_FACULTAD
-- ----------------------------
DROP TABLE IF EXISTS `PE_FACULTAD`;
CREATE TABLE `PE_FACULTAD` (
  `ID_FACULTAD` DOUBLE  NOT NULL ,
  `FAC_NOMBRE` VARCHAR(50)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_GRUPO_EXTENSION
-- ----------------------------
DROP TABLE IF EXISTS `PE_GRUPO_EXTENSION`;
CREATE TABLE `PE_GRUPO_EXTENSION` (
  `ID_GRUPO_EXTENSION` DOUBLE  NOT NULL ,
  `GREX_NOMBRE` VARCHAR(500)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_ITEM
-- ----------------------------
DROP TABLE IF EXISTS `PE_ITEM`;
CREATE TABLE `PE_ITEM` (
  `ID_ITEM` DOUBLE  NOT NULL ,
  `ITE_NOMBRE` VARCHAR(100)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_OBJETIVOS
-- ----------------------------
DROP TABLE IF EXISTS `PE_OBJETIVOS`;
CREATE TABLE `PE_OBJETIVOS` (
  `ID_OBJETIVO` DOUBLE  NOT NULL ,
  `OBJ_DESCRIPCION` VARCHAR(4000)  NOT NULL ,
  `OBJ_TIPO` VARCHAR(20)  NOT NULL ,
  `ID_PE_PROYECTO` DOUBLE  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PERSONA
-- ----------------------------
DROP TABLE IF EXISTS `PE_PERSONA`;
CREATE TABLE `PE_PERSONA` (
  `ID_PERSONA` DOUBLE  NOT NULL ,
  `PER_NOMBRES` VARCHAR(30)  NOT NULL ,
  `PER_APELLIDOS` VARCHAR(30)  NOT NULL ,
  `PER_TELEFONO` VARCHAR(10)  ,
  `PER_CEDULA` VARCHAR(20)  NOT NULL ,
  `PER_FECHA_REGISTRO` DATETIME  
)

;

-- ----------------------------
-- Table structure for PE_PERSONA_PROGRAMA
-- ----------------------------
DROP TABLE IF EXISTS `PE_PERSONA_PROGRAMA`;
CREATE TABLE `PE_PERSONA_PROGRAMA` (
  `ID_PERSONA_PROGRAMA` DOUBLE  NOT NULL ,
  `ID_PE_PERSONA` DOUBLE  NOT NULL ,
  `ID_PE_PROGRAMA` DOUBLE  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_POBLACION
-- ----------------------------
DROP TABLE IF EXISTS `PE_POBLACION`;
CREATE TABLE `PE_POBLACION` (
  `ID_POBLACION` DOUBLE  NOT NULL ,
  `POB_NOMBRE` VARCHAR(20)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_POBLACION_CICLO
-- ----------------------------
DROP TABLE IF EXISTS `PE_POBLACION_CICLO`;
CREATE TABLE `PE_POBLACION_CICLO` (
  `ID_POBLACION_CICLO` DOUBLE  NOT NULL ,
  `POCI_NOMBRE` VARCHAR(100)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_POBLACION_CONDICION
-- ----------------------------
DROP TABLE IF EXISTS `PE_POBLACION_CONDICION`;
CREATE TABLE `PE_POBLACION_CONDICION` (
  `ID_POBLACION_CONDICION` DOUBLE  NOT NULL ,
  `POCO_NOMRE` VARCHAR(100)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_POBLACION_GRUPOS
-- ----------------------------
DROP TABLE IF EXISTS `PE_POBLACION_GRUPOS`;
CREATE TABLE `PE_POBLACION_GRUPOS` (
  `ID_POBLACION_GRUPOS` DOUBLE  NOT NULL ,
  `POGR_NOMBRE` VARCHAR(100)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PROGRAMA
-- ----------------------------
DROP TABLE IF EXISTS `PE_PROGRAMA`;
CREATE TABLE `PE_PROGRAMA` (
  `ID_PROGRAMA` DOUBLE  NOT NULL ,
  `PRO_NOMBRE` VARCHAR(50)  NOT NULL ,
  `ID_PE_FACULTAD` DOUBLE  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PROYECTO
-- ----------------------------
DROP TABLE IF EXISTS `PE_PROYECTO`;
CREATE TABLE `PE_PROYECTO` (
  `ID_PROYECTO` DOUBLE  NOT NULL ,
  `PRO_NOMBRE` VARCHAR(500)  NOT NULL ,
  `PRO_METODOLOGIA` LONGTEXT  NOT NULL ,
  `PRO_COMPONENTE_INNOVADOR` VARCHAR(4000)  NOT NULL ,
  `PRO_RESULTADOS_ESPERADOS` VARCHAR(4000)  NOT NULL ,
  `ID_COORDINADOR` DOUBLE  NOT NULL ,
  `ID_PE_GRUPO_EXTENSION` DOUBLE  NOT NULL ,
  `ID_PE_POBLACION` DOUBLE  NOT NULL ,
  `ID_PE_DEPENDENCIA_PROYECTO` DOUBLE  NOT NULL ,
  `PRO_ELIMINADO` VARCHAR(1)  DEFAULT 0  NOT NULL ,
  `PRO_PLANTEAMIENTO_PROBLEMA` LONGTEXT  DEFAULT NULL NOT NULL ,
  `PRO_JUSTIFICACION` LONGTEXT  DEFAULT NULL NOT NULL ,
  `PRO_FECHA_PRESENTACION` DATETIME  NOT NULL ,
  `PRO_FECHA_INICIO` DATETIME  NOT NULL ,
  `PRO_FECHA_FIN` DATETIME  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PROYECTO_ARTR
-- ----------------------------
DROP TABLE IF EXISTS `PE_PROYECTO_ARTR`;
CREATE TABLE `PE_PROYECTO_ARTR` (
  `ID_PRAR` DOUBLE  NOT NULL ,
  `ID_PE_PROYECTO` DOUBLE  NOT NULL ,
  `ID_PE_AREA_TRABAJO` DOUBLE  NOT NULL ,
  `PRAR_ESTADO` CHAR(1)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PROYECTO_PERSONA
-- ----------------------------
DROP TABLE IF EXISTS `PE_PROYECTO_PERSONA`;
CREATE TABLE `PE_PROYECTO_PERSONA` (
  `ID_PROYECTO_PERSONA` DOUBLE  NOT NULL ,
  `ID_PE_PROYECTO` DOUBLE  NOT NULL ,
  `ID_PE_PERSONA` DOUBLE  NOT NULL ,
  `ID_PE_TIPO_VINCULACION` DOUBLE  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PROYECTO_POCI
-- ----------------------------
DROP TABLE IF EXISTS `PE_PROYECTO_POCI`;
CREATE TABLE `PE_PROYECTO_POCI` (
  `ID_PROYECTO_POCI` DOUBLE  NOT NULL ,
  `ID_PE_PROYECTO` DOUBLE  NOT NULL ,
  `ID_PE_POBLACION_CICLO` DOUBLE  NOT NULL ,
  `PRPO_ESTADO` CHAR(1)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PROYECTO_POCO
-- ----------------------------
DROP TABLE IF EXISTS `PE_PROYECTO_POCO`;
CREATE TABLE `PE_PROYECTO_POCO` (
  `ID_PROYECTO_POCO` DOUBLE  NOT NULL ,
  `ID_PE_PROYECTO` DOUBLE  NOT NULL ,
  `ID_PE_POBLACION_CONDICION` DOUBLE  NOT NULL ,
  `PRPO_ESTADO` CHAR(1)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_PROYECTO_POGR
-- ----------------------------
DROP TABLE IF EXISTS `PE_PROYECTO_POGR`;
CREATE TABLE `PE_PROYECTO_POGR` (
  `ID_PROYECTO_POGR` DOUBLE  NOT NULL ,
  `ID_PE_PROYECTO` DOUBLE  NOT NULL ,
  `ID_PE_POBLACION_GRUPOS` DOUBLE  NOT NULL ,
  `PRPO_ESTADO` CHAR(1)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_ROL
-- ----------------------------
DROP TABLE IF EXISTS `PE_ROL`;
CREATE TABLE `PE_ROL` (
  `ID_ROL` DOUBLE  NOT NULL ,
  `ROL_NOMBRE` VARCHAR(20)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_TIPO_DEPENDENCIA
-- ----------------------------
DROP TABLE IF EXISTS `PE_TIPO_DEPENDENCIA`;
CREATE TABLE `PE_TIPO_DEPENDENCIA` (
  `ID_TIPO_DEPENDENCIA` DOUBLE  NOT NULL ,
  `TIDE_NOMBRE` VARCHAR(200)  
)

;

-- ----------------------------
-- Table structure for PE_TIPO_DOCUMENTO
-- ----------------------------
DROP TABLE IF EXISTS `PE_TIPO_DOCUMENTO`;
CREATE TABLE `PE_TIPO_DOCUMENTO` (
  `ID_TIPO_DOCUMENTO` DOUBLE  NOT NULL ,
  `TIDO_NOMBRE` VARCHAR(30)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_TIPO_VINCULACION
-- ----------------------------
DROP TABLE IF EXISTS `PE_TIPO_VINCULACION`;
CREATE TABLE `PE_TIPO_VINCULACION` (
  `ID_TIPO_VINCULACION` DOUBLE  NOT NULL ,
  `TIVI_NOMBRE` VARCHAR(20)  NOT NULL 
)

;

-- ----------------------------
-- Table structure for PE_USUARIO
-- ----------------------------
DROP TABLE IF EXISTS `PE_USUARIO`;
CREATE TABLE `PE_USUARIO` (
  `ID_USUARIO` DOUBLE  NOT NULL ,
  `USU_CORREO` VARCHAR(100)  NOT NULL ,
  `USU_CONTRASENA` VARCHAR(300)  NOT NULL ,
  `ID_PE_PERSONA` DOUBLE  NOT NULL ,
  `USU_ESTADO` CHAR(1)  DEFAULT 0 NOT NULL ,
  `ID_PE_ROL` DOUBLE  NOT NULL ,
  `USU_ACTIVACION` VARCHAR(40)  NOT NULL 
)

;

-- ----------------------------
-- Function structure for ACTIVAR_CUENTA
-- ----------------------------
DROP PROCEDURE IF EXISTS `ACTIVAR_CUENTA`;

DELIMITER //

CREATE
PROCEDURE `ACTIVAR_CUENTA`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('Hubo un error en la activación. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    ROLLBACK;
    END;
    SELECT PE_USUARIO.USU_ACTIVACION INTO COD FROM PE_USUARIO WHERE PE_USUARIO.ID_USUARIO = USUARIO;
    
    IF COD = CODIGO THEN
    
        SELECT PE_USUARIO.ID_PE_ROL INTO ROL FROM PE_USUARIO WHERE PE_USUARIO.ID_USUARIO = USUARIO;
        
        IF ROL = 1 THEN
            UPDATE PE_USUARIO SET PE_USUARIO.USU_ESTADO = '2',
            PE_USUARIO.USU_ACTIVACION = (SELECT DBMS_RANDOM.string('X', 40) FROM DUAL)
            WHERE PE_USUARIO.ID_USUARIO = USUARIO;
        
            OPEN CR_SALIDA FOR
                SELECT '3' AS TIPO, 'Su cuenta fue activada correctamente. Pero en el momento no podrás ingresar a ella,
                porque no hay convocatorias para proyectos.' AS MENSAJE FROM DUAL;
        ELSE
            UPDATE PE_USUARIO SET PE_USUARIO.USU_ESTADO = '1',
            PE_USUARIO.USU_ACTIVACION = (SELECT DBMS_RANDOM.string('X', 40) FROM DUAL)
            WHERE PE_USUARIO.ID_USUARIO = USUARIO;
        
            OPEN CR_SALIDA FOR
                SELECT '3' AS TIPO, 'Su cuenta fue activada correctamente. Ya puede iniciar sesión.' AS MENSAJE FROM DUAL;
        END IF;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT '2' AS TIPO, 'Su cuenta ya fue activada! Ya puede iniciar sesión.' AS MENSAJE FROM DUAL;
    END IF;
    
    COMMIT;
    
    
END;
//

DELIMITER ;

 ACTIVAR_CUENTA;
/

-- ----------------------------
-- Function structure for CONS_CODIGO_ACTIVACION
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_CODIGO_ACTIVACION`;

DELIMITER //

CREATE
PROCEDURE `CONS_CODIGO_ACTIVACION`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_USUARIO.USU_ACTIVACION AS KEY, PE_USUARIO.ID_USUARIO AS ID
        FROM PE_USUARIO 
        INNER JOIN PE_PERSONA ON(PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA)
        WHERE PE_PERSONA.PER_CEDULA = CEDULA;
        
    COMMIT;
END;
//

DELIMITER ;

 CONS_CODIGO_ACTIVACION;
/

-- ----------------------------
-- Function structure for CONS_EVALUACIONES
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_EVALUACIONES`;

DELIMITER //

CREATE
PROCEDURE `CONS_EVALUACIONES`()
BEGIN
  OPEN CR_SALIDA FOR
    SELECT PRO.PRO_NOMBRE AS PROYECTO,
    CONCAT(PER.PER_NOMBRES, CONCAT(' ', PER.PER_APELLIDOS)) AS EVALUADOR,
    EVA.ID_EVALUACION AS EVALUACION,
    DATE_FORMAT(EVA.EVA_FECHA, '%Y/%m/%d %H:%i:%s') AS FECHA,
    EVA.EVA_PUNTAJE_TOTAL AS PUNTAJE,
    CASE WHEN EVA.EVA_ESTADO = '0' THEN 'Sin evaluar' ELSE 'Evaluado' END AS ESTADO,
    ARC.ARC_URL AS ARCHIVO
    FROM PE_PROYECTO PRO
    INNER JOIN PE_EVALUACION EVA ON EVA.ID_PE_PROYECTO = PRO.ID_PROYECTO
    INNER JOIN PE_PERSONA PER ON EVA.ID_PE_PERSONA = PER.ID_PERSONA
    INNER JOIN PE_ARCHIVO ARC ON ARC.ID_PE_PROYECTO = PRO.ID_PROYECTO
    WHERE PRO.PRO_ELIMINADO = '0'
    AND ARC.ID_PE_TIPO_DOCUMENTO = 1
    ORDER BY 6 ASC, 2 ASC;
 COMMIT;
END;
//

DELIMITER ;

 CONS_EVALUACIONES;
/

-- ----------------------------
-- Function structure for CONS_EVALUACIONES_REPORT
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_EVALUACIONES_REPORT`;

DELIMITER //

CREATE
PROCEDURE `CONS_EVALUACIONES_REPORT`()
BEGIN
    
    OPEN CR_SALIDA FOR
        SELECT ROWNUM AS No,
        PRO.PRO_NOMBRE AS PROYECTO, 
        CONCAT(COO.PER_NOMBRES, CONCAT(' ', COO.PER_APELLIDOS)) AS COORDINADOR,
        CONCAT(CAL.PER_NOMBRES, CONCAT(' ', CAL.PER_APELLIDOS)) AS EVALUADOR,
        (SELECT EI.EVIT_PUNTAJE FROM PE_EVALUACION_ITEM EI WHERE EI.ID_PE_EVALUACION = EVA.ID_EVALUACION AND EI.ID_PE_ITEM = 1) AS PLANTEAMIENTO,
        (SELECT EI.EVIT_PUNTAJE FROM PE_EVALUACION_ITEM EI WHERE EI.ID_PE_EVALUACION = EVA.ID_EVALUACION AND EI.ID_PE_ITEM = 2) AS JUSTIFICACIÓN,
        (SELECT EI.EVIT_PUNTAJE FROM PE_EVALUACION_ITEM EI WHERE EI.ID_PE_EVALUACION = EVA.ID_EVALUACION AND EI.ID_PE_ITEM = 3) AS OBJETIVOS,
        (SELECT EI.EVIT_PUNTAJE FROM PE_EVALUACION_ITEM EI WHERE EI.ID_PE_EVALUACION = EVA.ID_EVALUACION AND EI.ID_PE_ITEM = 4) AS METODOLOGÍA,
        (SELECT EI.EVIT_PUNTAJE FROM PE_EVALUACION_ITEM EI WHERE EI.ID_PE_EVALUACION = EVA.ID_EVALUACION AND EI.ID_PE_ITEM = 5) AS IMPACTO,
        (SELECT EI.EVIT_PUNTAJE FROM PE_EVALUACION_ITEM EI WHERE EI.ID_PE_EVALUACION = EVA.ID_EVALUACION AND EI.ID_PE_ITEM = 7) AS RESULTADOS,
        /*EVA.EVA_OBSERVACIONES AS OBSERVACIONES,*/
        EVA.EVA_PUNTAJE_TOTAL AS PUNTAJE_TOTAL,
        DATE_FORMAT(EVA.EVA_FECHA, '%Y-%m-%d %H:%i:%s') AS FECHA
        FROM PE_PERSONA COO
        INNER JOIN PE_PROYECTO PRO ON PRO.ID_COORDINADOR = COO.ID_PERSONA
        INNER JOIN PE_EVALUACION EVA ON EVA.ID_PE_PROYECTO = PRO.ID_PROYECTO
        INNER JOIN PE_PERSONA CAL ON EVA.ID_PE_PERSONA = CAL.ID_PERSONA
        WHERE EVA.EVA_ESTADO = 1
        AND PRO.PRO_ELIMINADO != '1'
        ORDER BY 1 ASC;
   
    COMMIT; 
END;
//

DELIMITER ;

 CONS_EVALUACIONES_REPORT;
/

-- ----------------------------
-- Function structure for CONS_EVALUACION_ID
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_EVALUACION_ID`;

DELIMITER //

CREATE
PROCEDURE `CONS_EVALUACION_ID`()
BEGIN
  OPEN CR_SALIDA FOR
    SELECT PRO.PRO_NOMBRE AS PROYECTO,
    CONCAT(PER.PER_NOMBRES, CONCAT(' ', PER.PER_APELLIDOS)) AS EVALUADOR,
    DATE_FORMAT(EVA.EVA_FECHA, '%Y/%m/%d %H:%i:%s') AS FECHA,
    EVA.EVA_PUNTAJE_TOTAL AS PUNTAJE,
    EVA.EVA_OBSERVACIONES AS OBSERVACIONES,
    ARC.ARC_URL AS ARCHIVO
    FROM PE_PROYECTO PRO
    INNER JOIN PE_EVALUACION EVA ON EVA.ID_PE_PROYECTO = PRO.ID_PROYECTO
    INNER JOIN PE_PERSONA PER ON EVA.ID_PE_PERSONA = PER.ID_PERSONA
    INNER JOIN PE_ARCHIVO ARC ON ARC.ID_PE_PROYECTO = PRO.ID_PROYECTO
    WHERE EVA.ID_EVALUACION = EVALUACION
    AND ARC.ID_PE_TIPO_DOCUMENTO = 1
    ORDER BY 1 ASC;
    
 COMMIT;
END;
//

DELIMITER ;

 CONS_EVALUACION_ID;
/

-- ----------------------------
-- Function structure for CONS_EVALUADORES_PROYECTO
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_EVALUADORES_PROYECTO`;

DELIMITER //

CREATE
PROCEDURE `CONS_EVALUADORES_PROYECTO`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_PERSONA.ID_PERSONA AS ID,
        CONCAT(PE_PERSONA.PER_NOMBRES, CONCAT(' ', CONCAT(PE_PERSONA.PER_APELLIDOS, CONCAT(' - ', PE_PERSONA.PER_CEDULA)))) AS NOMBRE
        FROM PE_PERSONA
        INNER JOIN PE_EVALUACION ON PE_EVALUACION.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
        INNER JOIN PE_PROYECTO ON PE_EVALUACION.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO
        WHERE PE_PROYECTO.ID_PROYECTO = PROYECTO
        ORDER BY 1 ASC;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_EVALUADORES_PROYECTO;
/

-- ----------------------------
-- Function structure for CONS_EVALUADOR_CB
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_EVALUADOR_CB`;

DELIMITER //

CREATE
PROCEDURE `CONS_EVALUADOR_CB`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_PERSONA.ID_PERSONA AS ID,
        CONCAT(PE_PERSONA.PER_NOMBRES, CONCAT(' ', CONCAT(PE_PERSONA.PER_APELLIDOS, CONCAT(' - ', PE_PERSONA.PER_CEDULA)))) AS NOMBRE
        FROM PE_PERSONA
        INNER JOIN PE_USUARIO ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
        INNER JOIN PE_ROL ON PE_USUARIO.ID_PE_ROL = PE_ROL.ID_ROL
        WHERE PE_ROL.ID_ROL = 2
        AND PE_USUARIO.USU_ESTADO = 1
        ORDER BY 2;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_EVALUADOR_CB;
/

-- ----------------------------
-- Function structure for CONS_LOGIN
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_LOGIN`;

DELIMITER //

CREATE
PROCEDURE `CONS_LOGIN`()
BEGIN    
    SELECT COUNT(PE_USUARIO.ID_USUARIO) INTO CONT 
    FROM PE_USUARIO
    WHERE PE_USUARIO.USU_CORREO = CORREO
    AND PE_USUARIO.USU_CONTRASENA = (SELECT DBMS_OBFUSCATION_TOOLKIT.MD5( INPUT => UTL_RAW.CAST_TO_RAW(CONTRASENA)) FROM DUAL);
    
    IF CONT != 0 THEN
        SELECT PE_USUARIO.USU_ESTADO INTO ESTADO FROM PE_USUARIO WHERE PE_USUARIO.USU_CORREO = CORREO;
    END IF;
    
    IF CONT = 0 THEN
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, '¡Correo o contraseña incorrectos.' AS MENSAJE FROM DUAL;
    ELSEIF ESTADO = 0 THEN
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'Su cuenta aún no ha sido activada.' AS MENSAJE FROM DUAL;
    ELSEIF ESTADO = 2 THEN
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'Su cuenta está inhabilitada temporalmente.' AS MENSAJE FROM DUAL;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT '3' AS TIPO, '¡Inicio exitoso!' AS MENSAJE FROM DUAL;
    END IF;

    COMMIT;
END;
//

DELIMITER ;

 CONS_LOGIN;
/

-- ----------------------------
-- Function structure for CONS_OBSERVACIONES_EVALUACION
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_OBSERVACIONES_EVALUACION`;

DELIMITER //

CREATE
PROCEDURE `CONS_OBSERVACIONES_EVALUACION`()
BEGIN
    SELECT PE_PERSONA.ID_PERSONA INTO ID_PE
    FROM PE_PERSONA
    INNER JOIN PE_USUARIO ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
    WHERE USU_CORREO = CORREO;

    OPEN CR_SALIDA FOR
        SELECT PE_EVALUACION.EVA_OBSERVACIONES AS OBSERVACIONES
        FROM PE_EVALUACION
        WHERE PE_EVALUACION.ID_EVALUACION = EVALUACION
        AND PE_EVALUACION.ID_PE_PERSONA = ID_PE;
    
    COMMIT;    
END;
//

DELIMITER ;

 CONS_OBSERVACIONES_EVALUACION;
/

-- ----------------------------
-- Function structure for CONS_PROYECTOS_ALL
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_PROYECTOS_ALL`;

DELIMITER //

CREATE
PROCEDURE `CONS_PROYECTOS_ALL`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PRO.ID_PROYECTO AS ID,
        PRO.PRO_NOMBRE AS PROYECTO,
        DATE_FORMAT(PRO.PRO_FECHA_PRESENTACION, '%Y-%m-%d') AS PRESENTACION,
        CONCAT(PER.PER_NOMBRES, CONCAT(' ', PER.PER_APELLIDOS)) AS COORDINADOR,
        PER.PER_TELEFONO AS TELEFONO,
        USU.USU_CORREO AS CORREO,
        (SELECT  SARC1.ARC_URL  
        FROM PE_ARCHIVO SARC1
        WHERE SARC1.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC1.ID_PE_TIPO_DOCUMENTO = 1) AS ARCHIVO,
        (SELECT  SARC.ARC_URL  
        FROM PE_ARCHIVO  SARC
        WHERE SARC.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC.ID_PE_TIPO_DOCUMENTO = 2) AS PRESUPUESTO,
        (SELECT  SARC.ARC_URL  
        FROM PE_ARCHIVO  SARC
        WHERE SARC.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC.ID_PE_TIPO_DOCUMENTO = 3) AS INFORME_PARCIAL,
        (SELECT  SARC.ARC_URL  
        FROM PE_ARCHIVO  SARC
        WHERE SARC.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC.ID_PE_TIPO_DOCUMENTO = 5) AS INFORME_PARCIAL2,
        (SELECT  SARC.ARC_URL  
        FROM PE_ARCHIVO  SARC
        WHERE SARC.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC.ID_PE_TIPO_DOCUMENTO = 4) AS INFORME_FINAL,
        CASE WHEN (SELECT  COUNT(SARC.ARC_URL)  
        FROM PE_ARCHIVO  SARC
        WHERE SARC.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC.ID_PE_TIPO_DOCUMENTO = 2) = 0 THEN '' ELSE 'Ver presupuesto' END AS ESTADO_PRESUPUESTO,
        CASE WHEN (SELECT  COUNT(SARC.ARC_URL)  
        FROM PE_ARCHIVO  SARC
        WHERE SARC.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC.ID_PE_TIPO_DOCUMENTO = 2) = 0 THEN 'No aprobado' ELSE 'Aprobado' END AS ESTADO,
        CASE WHEN (SELECT  COUNT(SARC.ARC_URL)  
        FROM PE_ARCHIVO  SARC
        WHERE SARC.ID_PE_PROYECTO = PRO.ID_PROYECTO 
        AND SARC.ID_PE_TIPO_DOCUMENTO = 3) = 0 THEN '' ELSE 'Ver informe' END AS ESTADO_INFORME,
        (SELECT COUNT(EVA.ID_EVALUACION) 
        FROM PE_EVALUACION EVA 
        INNER JOIN PE_PROYECTO SPRO ON EVA.ID_PE_PROYECTO = SPRO.ID_PROYECTO
        WHERE SPRO.ID_PROYECTO = PRO.ID_PROYECTO) AS CANT_EVALUADORES
        FROM PE_ARCHIVO ARC
        INNER JOIN PE_PROYECTO PRO ON ARC.ID_PE_PROYECTO = ID_PROYECTO
        INNER JOIN PE_PERSONA PER ON PRO.ID_COORDINADOR = PER.ID_PERSONA
        INNER JOIN PE_USUARIO USU ON USU.ID_PE_PERSONA = PER.ID_PERSONA
        WHERE PRO.PRO_ELIMINADO != '1'
        AND ARC.ID_PE_TIPO_DOCUMENTO = 1
        ORDER BY PRO.ID_PROYECTO;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_PROYECTOS_ALL;
/

-- ----------------------------
-- Function structure for CONS_PROYECTOS_COORDINADOR
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_PROYECTOS_COORDINADOR`;

DELIMITER //

CREATE
PROCEDURE `CONS_PROYECTOS_COORDINADOR`()
BEGIN
    SELECT PE_PERSONA.ID_PERSONA INTO ID_PE
    FROM PE_PERSONA
    INNER JOIN PE_USUARIO ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
    WHERE USU_CORREO = CORREO;
    
    OPEN CR_SALIDA FOR
        SELECT PE_PROYECTO.ID_PROYECTO AS PROYECTO_ID,
        PE_PROYECTO.PRO_NOMBRE AS PROYECTO,
        PE_PROYECTO.PRO_METODOLOGIA AS METODOLOGIA,
        PE_PROYECTO.PRO_JUSTIFICACION AS JUSTIFICACION,
        PE_PROYECTO.PRO_PLANTEAMIENTO_PROBLEMA AS PLANTEAMIENTO,
        PE_PROYECTO.PRO_COMPONENTE_INNOVADOR AS IMPACTO,
        PE_PROYECTO.PRO_RESULTADOS_ESPERADOS AS RESULTADOS,
        (SELECT ARC.ARC_URL FROM PE_ARCHIVO ARC WHERE ARC.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO AND ARC.ID_PE_TIPO_DOCUMENTO = '1') AS ARCHIVO,
        (SELECT ARC.ARC_URL FROM PE_ARCHIVO ARC WHERE ARC.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO AND ARC.ID_PE_TIPO_DOCUMENTO = '3') AS PARCIAL,
        (SELECT ARC.ARC_URL FROM PE_ARCHIVO ARC WHERE ARC.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO AND ARC.ID_PE_TIPO_DOCUMENTO = '5') AS PARCIAL2,
        (SELECT ARC.ARC_URL FROM PE_ARCHIVO ARC WHERE ARC.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO AND ARC.ID_PE_TIPO_DOCUMENTO = '4') AS FINAL,
        (SELECT PE_OBJETIVOS.OBJ_DESCRIPCION FROM PE_OBJETIVOS WHERE PE_OBJETIVOS.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO AND OBJ_TIPO = '1') AS GENERAL,
        (SELECT PE_OBJETIVOS.OBJ_DESCRIPCION FROM PE_OBJETIVOS WHERE PE_OBJETIVOS.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO AND OBJ_TIPO = '2') AS ESPECIFICOS
        FROM PE_PROYECTO 
        WHERE PE_PROYECTO.ID_COORDINADOR = ID_PE;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_PROYECTOS_COORDINADOR;
/

-- ----------------------------
-- Function structure for CONS_PROYECTOS_EVALUADOR
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_PROYECTOS_EVALUADOR`;

DELIMITER //

CREATE
PROCEDURE `CONS_PROYECTOS_EVALUADOR`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_PROYECTO.ID_PROYECTO AS ID,
        PE_PROYECTO.PRO_NOMBRE AS PROYECTO,
        CASE WHEN PE_EVALUACION.EVA_ESTADO = '0' THEN 'Sin evaluar' ELSE 'Evaluado' END AS ESTADO,
        CASE WHEN PE_EVALUACION.EVA_ESTADO = '0' THEN 'Evaluar' ELSE 'Ver evaluación' END AS ENLACE
        FROM PE_PROYECTO
        INNER JOIN PE_EVALUACION ON PE_EVALUACION.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO
        INNER JOIN PE_PERSONA ON PE_EVALUACION.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
        INNER JOIN PE_USUARIO ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
        WHERE PE_USUARIO.USU_CORREO = CORREO
        ORDER BY 1 ASC;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_PROYECTOS_EVALUADOR;
/

-- ----------------------------
-- Function structure for CONS_PROYECTOS_GRUPOS
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_PROYECTOS_GRUPOS`;

DELIMITER //

CREATE
PROCEDURE `CONS_PROYECTOS_GRUPOS`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PRO.PRO_NOMBRE AS PROYECTO, 
        CONCAT(COO.PER_NOMBRES, CONCAT(' ', COO.PER_APELLIDOS)) AS COORDINADOR,
        GE.GREX_NOMBRE AS GRUPO_EXTENSION,
        CONCAT(PER.PER_NOMBRES, CONCAT(' ', PER.PER_APELLIDOS)) AS INTEGRANTE, 
        PER.PER_CEDULA AS CEDULA_INTEGRANTE,
        TV.TIVI_NOMBRE AS TIPO_DE_VINCULACION
        FROM PE_PERSONA PER
        INNER JOIN PE_PROYECTO_PERSONA PP ON  PP.ID_PE_PERSONA = PER.ID_PERSONA
        INNER JOIN PE_PROYECTO PRO ON PP.ID_PE_PROYECTO = PRO.ID_PROYECTO
        INNER JOIN PE_TIPO_VINCULACION TV ON PP.ID_PE_TIPO_VINCULACION = TV.ID_TIPO_VINCULACION
        INNER JOIN PE_GRUPO_EXTENSION GE ON GE.ID_GRUPO_EXTENSION = PRO.ID_PE_GRUPO_EXTENSION
        INNER JOIN PE_PERSONA COO ON PRO.ID_COORDINADOR = COO.ID_PERSONA
        ORDER BY 1 ASC;
    COMMIT;
END;
//

DELIMITER ;

 CONS_PROYECTOS_GRUPOS;
/

-- ----------------------------
-- Function structure for CONS_PROYECTO_EVALUACION
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_PROYECTO_EVALUACION`;

DELIMITER //

CREATE
PROCEDURE `CONS_PROYECTO_EVALUACION`()
BEGIN
    SELECT PE_PERSONA.ID_PERSONA INTO ID_PE
    FROM PE_PERSONA
    INNER JOIN PE_USUARIO ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
    WHERE USU_CORREO = CORREO;
    
    OPEN CR_SALIDA FOR
        SELECT PE_PROYECTO.PRO_NOMBRE AS PROYECTO,
        PE_PROYECTO.PRO_METODOLOGIA AS METODOLOGIA,
        PE_PROYECTO.PRO_JUSTIFICACION AS JUSTIFICACION,
        PE_PROYECTO.PRO_PLANTEAMIENTO_PROBLEMA AS PLANTEAMIENTO,
        PE_PROYECTO.PRO_COMPONENTE_INNOVADOR AS IMPACTO,
        PE_PROYECTO.PRO_RESULTADOS_ESPERADOS AS RESULTADOS,
        (SELECT PE_OBJETIVOS.OBJ_DESCRIPCION FROM PE_OBJETIVOS WHERE PE_OBJETIVOS.ID_PE_PROYECTO = PROYECTO AND OBJ_TIPO = '1') AS GENERAL,
        (SELECT PE_OBJETIVOS.OBJ_DESCRIPCION FROM PE_OBJETIVOS WHERE PE_OBJETIVOS.ID_PE_PROYECTO = PROYECTO AND OBJ_TIPO = '2') AS ESPECIFICOS,
        PE_EVALUACION.ID_EVALUACION AS EVALUACION,
        PE_EVALUACION.EVA_ESTADO AS ESTADO
        FROM PE_PROYECTO 
        INNER JOIN PE_EVALUACION ON PE_EVALUACION.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO
        WHERE PE_PROYECTO.ID_PROYECTO = PROYECTO
        AND PE_EVALUACION.ID_PE_PERSONA = ID_PE
        ORDER BY 1 ASC;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_PROYECTO_EVALUACION;
/

-- ----------------------------
-- Function structure for CONS_PUNTAJE_ITEMS
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_PUNTAJE_ITEMS`;

DELIMITER //

CREATE
PROCEDURE `CONS_PUNTAJE_ITEMS`()
BEGIN

    OPEN CR_SALIDA FOR
        SELECT PE_EVALUACION_ITEM.EVIT_PUNTAJE AS PUNTAJE,
        PE_EVALUACION_ITEM.ID_PE_ITEM AS ITEM_ID,
        PE_EVALUACION_ITEM.EVIT_FECHA_CALIFICACION AS FECHA,
        PE_ITEM.ITE_NOMBRE AS ITEM_NOMBRE
        FROM PE_EVALUACION_ITEM
        INNER JOIN PE_EVALUACION ON PE_EVALUACION_ITEM.ID_PE_EVALUACION = PE_EVALUACION.ID_EVALUACION
        INNER JOIN PE_ITEM ON PE_EVALUACION_ITEM.ID_PE_ITEM = PE_ITEM.ID_ITEM
        WHERE PE_EVALUACION_ITEM.ID_PE_EVALUACION = EVALUACION
        AND PE_EVALUACION_ITEM.ID_PE_ITEM NOT IN(6, 8)
        ORDER BY 2 ASC;
    
    COMMIT;        
END;
//

DELIMITER ;

 CONS_PUNTAJE_ITEMS;
/

-- ----------------------------
-- Function structure for CONS_PUNTAJE_ITEMS_EVALUADOR
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_PUNTAJE_ITEMS_EVALUADOR`;

DELIMITER //

CREATE
PROCEDURE `CONS_PUNTAJE_ITEMS_EVALUADOR`()
BEGIN
    SELECT PE_PERSONA.ID_PERSONA INTO ID_PE
    FROM PE_PERSONA
    INNER JOIN PE_USUARIO ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
    WHERE USU_CORREO = CORREO;

    OPEN CR_SALIDA FOR
        SELECT PE_EVALUACION_ITEM.EVIT_PUNTAJE AS PUNTAJE,
        PE_EVALUACION_ITEM.ID_PE_ITEM AS ITEM
        FROM PE_EVALUACION_ITEM
        INNER JOIN PE_EVALUACION ON PE_EVALUACION_ITEM.ID_PE_EVALUACION = PE_EVALUACION.ID_EVALUACION
        WHERE PE_EVALUACION_ITEM.ID_PE_EVALUACION = EVALUACION
        AND PE_EVALUACION.ID_PE_PERSONA = ID_PE
        ORDER BY 2 ASC;
    
    COMMIT;        
END;
//

DELIMITER ;

 CONS_PUNTAJE_ITEMS_EVALUADOR;
/

-- ----------------------------
-- Function structure for CONS_ROL_CB
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_ROL_CB`;

DELIMITER //

CREATE
PROCEDURE `CONS_ROL_CB`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_ROL.ID_ROL AS ID,
        PE_ROL.ROL_NOMBRE AS NOMBRE
        FROM PE_ROL
        UNION SELECT 0 AS ID,
        'Todos' AS NOMBRE
        FROM DUAL
        ORDER BY 1 ASC;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_ROL_CB;
/

-- ----------------------------
-- Function structure for CONS_TIPO_DEPENDENCIA_CB
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_TIPO_DEPENDENCIA_CB`;

DELIMITER //

CREATE
PROCEDURE `CONS_TIPO_DEPENDENCIA_CB`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_TIPO_DEPENDENCIA.ID_TIPO_DEPENDENCIA AS ID, PE_TIPO_DEPENDENCIA.TIDE_NOMBRE AS NOMBRE 
        FROM PE_TIPO_DEPENDENCIA
        ORDER BY 1;
        
    COMMIT;
END;
//

DELIMITER ;

 CONS_TIPO_DEPENDENCIA_CB;
/

-- ----------------------------
-- Function structure for CONS_TIPO_VINCULACION_CB
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_TIPO_VINCULACION_CB`;

DELIMITER //

CREATE
PROCEDURE `CONS_TIPO_VINCULACION_CB`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_TIPO_VINCULACION.ID_TIPO_VINCULACION AS ID, PE_TIPO_VINCULACION.TIVI_NOMBRE AS NOMBRE 
        FROM PE_TIPO_VINCULACION
        ORDER BY 1;
        
    COMMIT;
END;
//

DELIMITER ;

 CONS_TIPO_VINCULACION_CB;
/

-- ----------------------------
-- Function structure for CONS_USUARIOS_ALL
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_USUARIOS_ALL`;

DELIMITER //

CREATE
PROCEDURE `CONS_USUARIOS_ALL`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT CONCAT(PER.PER_NOMBRES, CONCAT(' ', PER.PER_APELLIDOS)) AS NOMBRE,
        PER.PER_CEDULA AS CEDULA,
        PER.PER_TELEFONO AS TELEFONO,
        USU.USU_CORREO AS CORREO,
        PE_ROL.ROL_NOMBRE AS ROL
        FROM PE_PERSONA PER
        INNER JOIN PE_USUARIO USU ON USU.ID_PE_PERSONA = PER.ID_PERSONA
        INNER JOIN PE_ROL ON USU.ID_PE_ROL = PE_ROL.ID_ROL
        ORDER BY ROL DESC, NOMBRE ASC;
    
    COMMIT;
END;
//

DELIMITER ;

 CONS_USUARIOS_ALL;
/

-- ----------------------------
-- Function structure for CONS_USUARIOS_ROL
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_USUARIOS_ROL`;

DELIMITER //

CREATE
PROCEDURE `CONS_USUARIOS_ROL`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT CONCAT(PER.PER_NOMBRES, CONCAT(' ', PER.PER_APELLIDOS)) AS NOMBRE,
        PER.PER_CEDULA AS CEDULA,
        PER.PER_TELEFONO AS TELEFONO,
        USU.USU_CORREO AS CORREO,
        PE_ROL.ROL_NOMBRE AS ROL
        FROM PE_PERSONA PER
        INNER JOIN PE_USUARIO USU ON USU.ID_PE_PERSONA = PER.ID_PERSONA
        INNER JOIN PE_ROL ON USU.ID_PE_ROL = PE_ROL.ID_ROL
        WHERE PE_ROL.ID_ROL = ROL
        ORDER BY ROL DESC, NOMBRE ASC;
        
    COMMIT;
END;
//

DELIMITER ;

 CONS_USUARIOS_ROL;
/

-- ----------------------------
-- Function structure for CONS_USUARIO_CORREO
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_USUARIO_CORREO`;

DELIMITER //

CREATE
PROCEDURE `CONS_USUARIO_CORREO`()
BEGIN
    OPEN CR_SALIDA FOR
        SELECT PE_PERSONA.ID_PERSONA AS PERSONA,
        PE_PERSONA.PER_NOMBRES AS NOMBRES,
        PE_PERSONA.PER_APELLIDOS AS APELLIDOS,
        PE_PERSONA.PER_CEDULA AS CEDULA,
        PE_PERSONA.PER_TELEFONO AS TELEFONO,
        PE_USUARIO.USU_CORREO AS CORREO,
        PE_ROL.ROL_NOMBRE AS ROL
        FROM PE_ROL
        INNER JOIN PE_USUARIO ON PE_USUARIO.ID_PE_ROL = PE_ROL.ID_ROL
        INNER JOIN PE_PERSONA ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
        WHERE PE_USUARIO.USU_CORREO = CORREO;
   
    COMMIT;     
END;
//

DELIMITER ;

 CONS_USUARIO_CORREO;
/

-- ----------------------------
-- Function structure for CONS_USUARIO_EXISTENCIA
-- ----------------------------
DROP PROCEDURE IF EXISTS `CONS_USUARIO_EXISTENCIA`;

DELIMITER //

CREATE
PROCEDURE `CONS_USUARIO_EXISTENCIA`()
BEGIN
    SELECT COUNT(USU.ID_USUARIO) INTO CANT FROM PE_USUARIO USU WHERE USU_CORREO = CORREO;
   
    IF CANT = 0 THEN
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'No se ha encontrado el correo registrado.' AS MENSAJE FROM DUAL;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT USU.ID_USUARIO AS ID, PE.PER_NOMBRES AS NOMBRE, USU.USU_ACTIVACION AS CODIGO, '3' AS TIPO,
            'A su correo se envió la información necesaria para restaurar su contraseña.' AS MENSAJE
            FROM PE_PERSONA PE 
            INNER JOIN PE_USUARIO USU ON USU.ID_PE_PERSONA = PE.ID_PERSONA  
            WHERE USU.USU_CORREO = CORREO;
    END IF;
    
END;
//

DELIMITER ;

 CONS_USUARIO_EXISTENCIA;
/

-- ----------------------------
-- Function structure for INSE_DOCENTE
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_DOCENTE`;

DELIMITER //

CREATE
PROCEDURE `INSE_DOCENTE`()
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLSTATE '23000' BEGIN
    ROLLBACK;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'Error! La persona y/o correo ya se encuentran registrados.' AS MENSAJE FROM DUAL;
    END;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SELECT COUNT(PE_PERSONA.ID_PERSONA) INTO ID_PE FROM PE_PERSONA;
    IF ID_PE = 0 THEN
        SET ID_PE = 1;
    ELSE
        SELECT MAX(PE_PERSONA.ID_PERSONA)+1 INTO ID_PE FROM PE_PERSONA;
    END IF;
    INSERT INTO PE_PERSONA (ID_PERSONA, PER_CEDULA, PER_NOMBRES, PER_APELLIDOS, PER_TELEFONO)
    VALUES (ID_PE, CEDULA, UPPER(NOMBRES), UPPER(APELLIDOS), TELEFONO);

    SELECT COUNT(PE_USUARIO.ID_USUARIO) INTO ID_US FROM PE_USUARIO;
    IF ID_US = 0 THEN
        SET ID_US = 1;
    ELSE
        SELECT MAX(PE_USUARIO.ID_USUARIO)+1 INTO ID_US FROM PE_USUARIO;
    END IF;
    INSERT INTO PE_USUARIO (ID_USUARIO, USU_CORREO, USU_CONTRASENA, USU_ACTIVACION, ID_PE_PERSONA, ID_PE_ROL)
    VALUES (ID_US, CORREO,  (SELECT DBMS_OBFUSCATION_TOOLKIT.MD5( INPUT => UTL_RAW.CAST_TO_RAW(CONTRASENA)) FROM DUAL), 
    (SELECT DBMS_RANDOM.string('X', 40) FROM DUAL), ID_PE, 4);
    
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Por favor, verifique su cuenta por medio de un enlace enviado a su correo. 
        Si el correo no llega a la bandeja de entrada, por favor revisa en spam.' AS MENSAJE FROM DUAL;
    COMMIT;
    
            
END;
//

DELIMITER ;

 INSE_DOCENTE;
/

-- ----------------------------
-- Function structure for INSE_EVALUACION
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_EVALUACION`;

DELIMITER //

CREATE
PROCEDURE `INSE_EVALUACION`()
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLERRM;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SELECT COUNT(PE_EVALUACION.ID_EVALUACION) INTO CANT_EVAL
    FROM PE_EVALUACION 
    INNER JOIN PE_PROYECTO ON PE_EVALUACION.ID_PE_PROYECTO = PE_PROYECTO.ID_PROYECTO
    WHERE PE_PROYECTO.ID_PROYECTO = PROYECTO;
    
    IF CANT_EVAL <= 2 THEN
        SELECT COUNT(PE_EVALUACION.ID_EVALUACION) INTO ID_EV FROM PE_EVALUACION;
        IF ID_EV = 0 THEN
            SET ID_EV = 1;
        ELSE
            SELECT MAX(PE_EVALUACION.ID_EVALUACION)+1 INTO ID_EV FROM PE_EVALUACION;
        END IF;
        INSERT INTO PE_EVALUACION (ID_EVALUACION, ID_PE_PROYECTO, ID_PE_PERSONA)
        VALUES (ID_EV, PROYECTO, EVALUADOR);
        
        SELECT COUNT(PE_EVALUACION_ITEM.ID_EVALUACION_ITEM) INTO ID_EI FROM PE_EVALUACION_ITEM;
        IF ID_EI = 0 THEN
            SET ID_EI = 1;
        ELSE
            SELECT MAX(PE_EVALUACION_ITEM.ID_EVALUACION_ITEM)+1 INTO ID_EI FROM PE_EVALUACION_ITEM;
        END IF;
        SELECT COUNT(PE_ITEM.ID_ITEM) INTO CANT FROM PE_ITEM;
        SET I = 1;
        WHILE I <= CANT DO
            INSERT INTO PE_EVALUACION_ITEM (ID_EVALUACION_ITEM, ID_PE_ITEM, ID_PE_EVALUACION)
            VALUES (ID_EI, (SELECT ID_ITEM FROM (SELECT ROWNUM R_, ID_ITEM FROM PE_ITEM) WHERE R_ = I), ID_EV);
            SET ID_EI = ID_EI + 1;
            SET I = I + 1;
        END WHILE;
        
        OPEN CR_SALIDA FOR
            SELECT '3' AS TIPO, 'Evaluador asignado correctamente.' AS MENSAJE FROM DUAL;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT '2' AS TIPO, 'Ya se asignaron los dos evaluadores a este proyecto.' AS MENSAJE FROM DUAL;
    END IF;
    
    COMMIT;
    
            
END;
//

DELIMITER ;

 INSE_EVALUACION;
/

-- ----------------------------
-- Function structure for INSE_EVALUADOR
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_EVALUADOR`;

DELIMITER //

CREATE
PROCEDURE `INSE_EVALUADOR`()
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLSTATE '23000' BEGIN
        ROLLBACK;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'Error! La persona y/o correo ya se encuentran registrados.' AS MENSAJE FROM DUAL;
    END;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
        ROLLBACK;
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SELECT COUNT(PE_PERSONA.ID_PERSONA) INTO ID_PE FROM PE_PERSONA;
    IF ID_PE = 0 THEN
        SET ID_PE = 1;
    ELSE
        SELECT MAX(PE_PERSONA.ID_PERSONA)+1 INTO ID_PE FROM PE_PERSONA;
    END IF;
    INSERT INTO PE_PERSONA (ID_PERSONA, PER_CEDULA, PER_NOMBRES, PER_APELLIDOS, PER_TELEFONO)
    VALUES (ID_PE, CEDULA, UPPER(NOMBRES), UPPER(APELLIDOS), TELEFONO);

    SELECT COUNT(PE_USUARIO.ID_USUARIO) INTO ID_US FROM PE_USUARIO;
    IF ID_US = 0 THEN
        SET ID_US = 1;
    ELSE
        SELECT MAX(PE_USUARIO.ID_USUARIO)+1 INTO ID_US FROM PE_USUARIO;
    END IF;
    INSERT INTO PE_USUARIO (ID_USUARIO, USU_CORREO, USU_CONTRASENA, USU_ACTIVACION, ID_PE_PERSONA, ID_PE_ROL)
    VALUES (ID_US, CORREO,  (SELECT DBMS_OBFUSCATION_TOOLKIT.MD5( INPUT => UTL_RAW.CAST_TO_RAW(CONTRASENA)) FROM DUAL), 
    (SELECT DBMS_RANDOM.string('X', 40) FROM DUAL), ID_PE, 2);
    
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Por favor, verifique su cuenta por medio de un enlace enviado a su correo. 
        Si el correo no llega a la bandeja de entrada, por favor revisa en spam.' AS MENSAJE FROM DUAL;
    COMMIT;
    
            
END;
//

DELIMITER ;

 INSE_EVALUADOR;
/

-- ----------------------------
-- Function structure for INSE_INFORME_FINAL
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_INFORME_FINAL`;

DELIMITER //

CREATE
PROCEDURE `INSE_INFORME_FINAL`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLERRM;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SELECT COUNT(ARC.ID_ARCHIVO) INTO VERS FROM PE_ARCHIVO ARC WHERE ARC.ID_PE_PROYECTO = PROYECTO AND ARC.ID_PE_TIPO_DOCUMENTO = '4';
    
    SET NOM_AR = CONCAT('ARC_INFORME_FINAL_' , IFNULL(PROYECTO, '') , '_v' , IFNULL(VERS, ''));
    SET URL_AR = CONCAT('../Content/Archivos/Proyectos/Informes/' , IFNULL(NOM_AR, '') , IFNULL(TIPO_ARCHIVO, ''));
        
    IF VERS = 0 THEN
    
        SELECT COUNT(PE_ARCHIVO.ID_ARCHIVO) INTO ID_AR FROM PE_ARCHIVO;
        IF ID_AR = 0 THEN
            SET ID_AR = 1;
        ELSE
            SELECT MAX(PE_ARCHIVO.ID_ARCHIVO)+1 INTO ID_AR FROM PE_ARCHIVO;
        END IF;
        INSERT INTO PE_ARCHIVO (ID_ARCHIVO, ARC_NOMBRE, ARC_URL, ARC_TIPO, ID_PE_PROYECTO, ID_PE_TIPO_DOCUMENTO) 
        VALUES (ID_AR, NOM_AR, URL_AR, TIPO_ARCHIVO, PROYECTO, 4);
        
    ELSE
        UPDATE PE_ARCHIVO SET ARC_URL = URL_AR WHERE ID_PE_PROYECTO = PROYECTO AND ID_PE_TIPO_DOCUMENTO = 4;
    END IF;
    
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Archivo registrado correctamente!' AS MENSAJE, URL_AR AS RUTA FROM DUAL;
    
    COMMIT;
    
    
END;
//

DELIMITER ;

 INSE_INFORME_FINAL;
/

-- ----------------------------
-- Function structure for INSE_INFORME_PARCIAL
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_INFORME_PARCIAL`;

DELIMITER //

CREATE
PROCEDURE `INSE_INFORME_PARCIAL`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLERRM;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SELECT COUNT(ARC.ID_ARCHIVO) INTO VERS FROM PE_ARCHIVO ARC WHERE ARC.ID_PE_PROYECTO = PROYECTO AND ARC.ID_PE_TIPO_DOCUMENTO = '5';
    
    SET NOM_AR = CONCAT('ARC_INFORME_PARCIAL_2_' , IFNULL(PROYECTO, '') , '_v' , IFNULL(VERS, ''));
    SET URL_AR = CONCAT('../Content/Archivos/Proyectos/Informes/' , IFNULL(NOM_AR, '') , IFNULL(TIPO_ARCHIVO, ''));
        
    IF VERS = 0 THEN
    
        SELECT COUNT(PE_ARCHIVO.ID_ARCHIVO) INTO ID_AR FROM PE_ARCHIVO;
        IF ID_AR = 0 THEN
            SET ID_AR = 1;
        ELSE
            SELECT MAX(PE_ARCHIVO.ID_ARCHIVO)+1 INTO ID_AR FROM PE_ARCHIVO;
        END IF;
        INSERT INTO PE_ARCHIVO (ID_ARCHIVO, ARC_NOMBRE, ARC_URL, ARC_TIPO, ID_PE_PROYECTO, ID_PE_TIPO_DOCUMENTO) 
        VALUES (ID_AR, NOM_AR, URL_AR, TIPO_ARCHIVO, PROYECTO, 5);
        
    ELSE
        UPDATE PE_ARCHIVO SET ARC_URL = URL_AR WHERE ID_PE_PROYECTO = PROYECTO AND ID_PE_TIPO_DOCUMENTO = 5;
    END IF;
    
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Archivo registrado correctamente!' AS MENSAJE, URL_AR AS RUTA FROM DUAL;
    
    COMMIT;
    
    
END;
//

DELIMITER ;

 INSE_INFORME_PARCIAL;
/

-- ----------------------------
-- Function structure for INSE_ITEMS_EVALUACION
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_ITEMS_EVALUACION`;

DELIMITER //

CREATE
PROCEDURE `INSE_ITEMS_EVALUACION`()
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLERRM;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;
    SELECT COUNT(PE_EVALUACION_ITEM.ID_EVALUACION_ITEM) INTO ID_EI FROM PE_EVALUACION_ITEM;
    IF ID_EI = 0 THEN
        SET ID_EI = 1;
    ELSE
        SELECT MAX(PE_EVALUACION_ITEM.ID_EVALUACION_ITEM)+1 INTO ID_EI FROM PE_EVALUACION_ITEM;
    END IF;
    SELECT COUNT(PE_ITEM.ID_ITEM) INTO CANT FROM PE_ITEM;
    SET I = 1;
    WHILE I <= CANT DO
        INSERT INTO PE_EVALUACION_ITEM (ID_EVALUACION_ITEM, ID_PE_ITEM, ID_PE_EVALUACION)
        VALUES (ID_EI, (SELECT ID_ITEM FROM (SELECT ROWNUM R_, ID_ITEM FROM PE_ITEM) WHERE R_ = I), EVALUACION);
        SET ID_EI = ID_EI + 1;
        SET I = I + 1;
    END WHILE;
    
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Items asignados correctamente.' AS MENSAJE FROM DUAL;
    COMMIT;
    
            
END;
//

DELIMITER ;

 INSE_ITEMS_EVALUACION;
/

-- ----------------------------
-- Function structure for INSE_PRESUPUESTO
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_PRESUPUESTO`;

DELIMITER //

CREATE
PROCEDURE `INSE_PRESUPUESTO`()
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;
    
    SELECT COUNT(PE_ARCHIVO.ID_ARCHIVO) INTO ID_AR FROM PE_ARCHIVO;
    IF ID_AR = 0 THEN
        SET ID_AR = 1;
    ELSE
        SELECT MAX(PE_ARCHIVO.ID_ARCHIVO)+1 INTO ID_AR FROM PE_ARCHIVO;
    END IF;
    SET NOM_AR = CONCAT('ARC_PRESUPUESTO_PROYECTO_', PROYECTO);
    SET URL_AR = CONCAT('../Content/Archivos/Proyectos/Presupuesto/', CONCAT(NOM_AR, TIPO_ARCHIVO));
    INSERT INTO PE_ARCHIVO (ID_ARCHIVO, ARC_NOMBRE, ARC_URL, ARC_TIPO, ID_PE_PROYECTO, ID_PE_TIPO_DOCUMENTO) 
    VALUES (ID_AR, NOM_AR, URL_AR, TIPO_ARCHIVO, PROYECTO, 2);
        
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Presupuesto guardado correctamente.' AS MENSAJE, URL_AR AS RUTA FROM DUAL;
    COMMIT;
    
            
END;
//

DELIMITER ;

 INSE_PRESUPUESTO;
/

-- ----------------------------
-- Function structure for INSE_PROYECTO
-- ----------------------------
DROP PROCEDURE IF EXISTS `INSE_PROYECTO`;

DELIMITER //

CREATE
PROCEDURE `INSE_PROYECTO`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLSTATE '23000' BEGIN
    ROLLBACK;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'Ya tienes registrado un proyecto con el mismo nombre.' AS MENSAJE FROM DUAL;
    END;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLERRM;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SELECT COUNT(PE_GRUPO_EXTENSION.ID_GRUPO_EXTENSION) INTO ID_GE FROM PE_GRUPO_EXTENSION;
    IF ID_GE = 0 THEN
        SET ID_GE = 1;
    ELSE
        SELECT MAX(PE_GRUPO_EXTENSION.ID_GRUPO_EXTENSION)+1 INTO ID_GE FROM PE_GRUPO_EXTENSION;
    END IF;
    INSERT INTO PE_GRUPO_EXTENSION (ID_GRUPO_EXTENSION, GREX_NOMBRE) 
    VALUES (ID_GE, GRUPO_EXTENSION);

    SELECT PE_PERSONA.ID_PERSONA INTO ID_CO FROM PE_USUARIO
    INNER JOIN PE_PERSONA ON PE_USUARIO.ID_PE_PERSONA = PE_PERSONA.ID_PERSONA
    WHERE PE_USUARIO.USU_CORREO = COORDINADOR;

    SELECT COUNT(PE_PROYECTO.ID_PROYECTO) INTO ID_PR FROM PE_PROYECTO;
    IF ID_PR = 0 THEN
        SET ID_PR = 1;
    ELSE
        SELECT MAX(PE_PROYECTO.ID_PROYECTO)+1 INTO ID_PR FROM PE_PROYECTO;
    END IF;
    INSERT INTO PE_PROYECTO (ID_PROYECTO, PRO_NOMBRE, PRO_FECHA_INICIO, PRO_FECHA_FIN, PRO_PLANTEAMIENTO_PROBLEMA, 
    PRO_JUSTIFICACION, PRO_METODOLOGIA, PRO_COMPONENTE_INNOVADOR, PRO_RESULTADOS_ESPERADOS,
    ID_COORDINADOR, ID_PE_GRUPO_EXTENSION, ID_PE_POBLACION, ID_PE_DEPENDENCIA_PROYECTO)
    VALUES (ID_PR, UPPER(NOMBRE), STR_TO_DATE(FECHA_INICIO, '%Y/%m/%d'), STR_TO_DATE(FECHA_FIN, '%Y/%m/%d'), PLANTEAMIENTO, JUSTIFICACION, 
    METODOLOGIA, COMPONENTE_INNOVADOR, RESULTADOS_ESPERADOS, ID_CO, ID_GE, POBLACION, DEPENDENCIA);

    /*SELECT COUNT(PE_PROYECTO_PERSONA.ID_PROYECTO_PERSONA) INTO ID_PP FROM PE_PROYECTO_PERSONA;
    IF ID_PP = 0 THEN
        ID_PP := 1;
    ELSE
        SELECT MAX(PE_PROYECTO_PERSONA.ID_PROYECTO_PERSONA)+1 INTO ID_PP FROM PE_PROYECTO_PERSONA;
    END IF;
    INSERT INTO PE_PROYECTO_PERSONA (ID_PROYECTO_PERSONA, ID_PE_PROYECTO, ID_PE_PERSONA, ID_PE_TIPO_VINCULACION) 
    VALUES (ID_PP, ID_PR, null, 5);
    INSERT INTO PE_PROYECTO_PERSONA (ID_PROYECTO_PERSONA, ID_PE_PROYECTO, ID_PE_PERSONA, ID_PE_TIPO_VINCULACION) 
    VALUES ((ID_PP+1), ID_PR, null, 5);*/
    
    SELECT COUNT(PE_OBJETIVOS.ID_OBJETIVO) INTO ID_OB FROM PE_OBJETIVOS;
    IF ID_OB = 0 THEN
        SET ID_OB = 1;
    ELSE
        SELECT MAX(PE_OBJETIVOS.ID_OBJETIVO)+1 INTO ID_OB FROM PE_OBJETIVOS;
    END IF;
    INSERT INTO PE_OBJETIVOS (ID_OBJETIVO, OBJ_DESCRIPCION, OBJ_TIPO, ID_PE_PROYECTO) 
    VALUES (ID_OB, OBJETIVO_GENERAL, 1, ID_PR);
    INSERT INTO PE_OBJETIVOS (ID_OBJETIVO, OBJ_DESCRIPCION, OBJ_TIPO, ID_PE_PROYECTO)  
    VALUES ((ID_OB+1), OBJETIVOS_ESPECIFICOS, 2, ID_PR);
    
    SELECT COUNT(PE_ARCHIVO.ID_ARCHIVO) INTO ID_AR FROM PE_ARCHIVO;
    IF ID_AR = 0 THEN
        SET ID_AR = 1;
    ELSE
        SELECT MAX(PE_ARCHIVO.ID_ARCHIVO)+1 INTO ID_AR FROM PE_ARCHIVO;
    END IF;
    SET NOM_AR = CONCAT('ARC_PROYECTO_', ID_PR);
    SET URL_AR = CONCAT('../Content/Archivos/Proyectos/', CONCAT(NOM_AR, TIPO_ARCHIVO));
    INSERT INTO PE_ARCHIVO (ID_ARCHIVO, ARC_NOMBRE, ARC_URL, ARC_TIPO, ID_PE_PROYECTO, ID_PE_TIPO_DOCUMENTO) 
    VALUES (ID_AR, NOM_AR, URL_AR, TIPO_ARCHIVO, ID_PR, 1);
        
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Proyecto registrado correctamente!' AS MENSAJE, URL_AR AS RUTA FROM DUAL;
    
    COMMIT;
    
    
END;
//

DELIMITER ;

 INSE_PROYECTO;
/

-- ----------------------------
-- Function structure for RECUPERAR_CONTRASENA
-- ----------------------------
DROP PROCEDURE IF EXISTS `RECUPERAR_CONTRASENA`;

DELIMITER //

CREATE
PROCEDURE `RECUPERAR_CONTRASENA`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('Hubo un error en el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    ROLLBACK;
    END;
    SELECT USU.USU_ACTIVACION INTO COD FROM PE_USUARIO USU WHERE USU.ID_USUARIO = USUARIO;
    
    IF COD = CODIGO THEN
        
        UPDATE PE_USUARIO 
        SET USU_CONTRASENA = (SELECT DBMS_OBFUSCATION_TOOLKIT.MD5( INPUT => UTL_RAW.CAST_TO_RAW(CONTRASENA)) FROM DUAL)
        WHERE ID_USUARIO = USUARIO;
        
        OPEN CR_SALIDA FOR
            SELECT '3' AS TIPO, 
            CONCAT(IFNULL((SELECT PE.PER_NOMBRES FROM PE_PERSONA PE 
            INNER JOIN PE_USUARIO USU ON PE.ID_PERSONA = USU.ID_PE_PERSONA WHERE USU.ID_USUARIO = USUARIO), '') 
            ,', tu contraseña fue actualizada correctamente.') AS MENSAJE FROM DUAL;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'No se pudo identificar ninguna cuenta.' AS MENSAJE FROM DUAL;
    END IF;
    
    COMMIT;
    
    
END;
//

DELIMITER ;

 RECUPERAR_CONTRASENA;
/

-- ----------------------------
-- Function structure for UPDA_ARCHVO_PROYECTO
-- ----------------------------
DROP PROCEDURE IF EXISTS `UPDA_ARCHVO_PROYECTO`;

DELIMITER //

CREATE
PROCEDURE `UPDA_ARCHVO_PROYECTO`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLerrm;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SET NOM_AR = CONCAT('ARC2_PROYECTO_', PROYECTO);
    SET URL_AR = CONCAT('../Content/Archivos/Proyectos/', CONCAT(NOM_AR, TIPO_ARCHIVO));
    
    UPDATE PE_ARCHIVO
    SET ARC_URL = URL_AR,
    ARC_NOMBRE = NOM_AR,
    ARC_TIPO = TIPO_ARCHIVO
    WHERE ID_PE_PROYECTO = PROYECTO;
    
    OPEN CR_SALIDA FOR
        SELECT '3' AS TIPO, 'Archivo actualizado correctamente!' AS MENSAJE, URL_AR AS RUTA FROM DUAL;
    
    COMMIT;
    
    
END;
//

DELIMITER ;

 UPDA_ARCHVO_PROYECTO;
/

-- ----------------------------
-- Function structure for UPDA_CONTRASENA
-- ----------------------------
DROP PROCEDURE IF EXISTS `UPDA_CONTRASENA`;

DELIMITER //

CREATE
PROCEDURE `UPDA_CONTRASENA`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
        ROLLBACK;
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;
    SELECT PE_USUARIO.USU_CONTRASENA INTO CA
    FROM PE_USUARIO
    WHERE PE_USUARIO.USU_CORREO = CORREO;
    
    SELECT DBMS_OBFUSCATION_TOOLKIT.MD5( INPUT => UTL_RAW.CAST_TO_RAW(CONTRASENA_ACTUAL)) INTO CA_IN FROM DUAL;
    
    IF CA = CA_IN THEN
        UPDATE PE_USUARIO
        SET USU_CONTRASENA = (SELECT DBMS_OBFUSCATION_TOOLKIT.MD5( INPUT => UTL_RAW.CAST_TO_RAW(CONTRASENA_NUEVA)) FROM DUAL)
        WHERE PE_USUARIO.USU_CORREO = CORREO;
        
        OPEN CR_SALIDA FOR
            SELECT '3' AS TIPO, 'Contraseña actualizada correctamente.' AS MENSAJE FROM DUAL;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'Contraseña actual incorrecta.' AS MENSAJE FROM DUAL;
    END IF;
    
    COMMIT;


END;
//

DELIMITER ;

 UPDA_CONTRASENA;
/

-- ----------------------------
-- Function structure for UPDA_EVALUACION
-- ----------------------------
DROP PROCEDURE IF EXISTS `UPDA_EVALUACION`;

DELIMITER //

CREATE
PROCEDURE `UPDA_EVALUACION`()
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;
  
    SELECT PE_EVALUACION.EVA_ESTADO INTO ESTADO_EVA
    FROM PE_EVALUACION
    WHERE PE_EVALUACION.ID_EVALUACION = EVALUACION;
    
    IF ESTADO_EVA = 0 THEN
    
        UPDATE PE_EVALUACION_ITEM
        SET EVIT_PUNTAJE = PLANTEAMIENTO
        WHERE ID_PE_ITEM = 1 
        AND ID_PE_EVALUACION = EVALUACION;
    
        UPDATE PE_EVALUACION_ITEM
        SET EVIT_PUNTAJE = JUSTIFICACION
        WHERE ID_PE_ITEM = 2 
        AND ID_PE_EVALUACION = EVALUACION;
    
        UPDATE PE_EVALUACION_ITEM
        SET EVIT_PUNTAJE = OBJETIVOS
        WHERE ID_PE_ITEM = 3 
        AND ID_PE_EVALUACION = EVALUACION;
    
        UPDATE PE_EVALUACION_ITEM
        SET EVIT_PUNTAJE = METODOLOGIA
        WHERE ID_PE_ITEM = 4 
        AND ID_PE_EVALUACION = EVALUACION;
    
        UPDATE PE_EVALUACION_ITEM
        SET EVIT_PUNTAJE = IMPACTO
        WHERE ID_PE_ITEM = 5 
        AND ID_PE_EVALUACION = EVALUACION;
    
        UPDATE PE_EVALUACION_ITEM
        SET EVIT_PUNTAJE = RESULTADOS
        WHERE ID_PE_ITEM = 7 
        AND ID_PE_EVALUACION = EVALUACION;
    
        UPDATE PE_EVALUACION
        SET EVA_OBSERVACIONES = OBSERVACIONES,
        EVA_FECHA = SYSDATE(),
        EVA_ESTADO = '1',
        EVA_PUNTAJE_TOTAL = (SELECT SUM(PE_EVALUACION_ITEM.EVIT_PUNTAJE) FROM PE_EVALUACION_ITEM
            WHERE PE_EVALUACION_ITEM.ID_PE_EVALUACION = EVALUACION)
        WHERE ID_EVALUACION = EVALUACION;
  
        OPEN CR_SALIDA FOR
            SELECT '3' AS TIPO, 'Evaluación guardada correctamente. A partir de ahora no podrás modificarla.' AS MENSAJE FROM DUAL;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'La evaluación fue registrada anteriormente..' AS MENSAJE FROM DUAL;
    END IF;
    
    COMMIT;
    
            
    
END;
//

DELIMITER ;

 UPDA_EVALUACION;
/

-- ----------------------------
-- Function structure for UPDA_ITEM_EVALUACION
-- ----------------------------
DROP PROCEDURE IF EXISTS `UPDA_ITEM_EVALUACION`;

DELIMITER //

CREATE
PROCEDURE `UPDA_ITEM_EVALUACION`()
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
    ROLLBACK;
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar el registro. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;
  
    SELECT PE_EVALUACION.EVA_ESTADO INTO ESTADO_EVA
    FROM PE_EVALUACION
    WHERE PE_EVALUACION.ID_EVALUACION = EVALUACION;
  
    IF ESTADO_EVA = 0 THEN
        UPDATE PE_EVALUACION_ITEM
        SET EVIT_PUNTAJE = PUNTAJE,
        EVIT_FECHA_CALIFICACION = SYSDATE()
        WHERE ID_PE_ITEM = ITEM 
        AND ID_PE_EVALUACION = EVALUACION;
        OPEN CR_SALIDA FOR
            SELECT '3' AS TIPO, 'Puntuación guardada correctamente' AS MENSAJE FROM DUAL;
    ELSE
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, 'Ya finalizaste la evaluación. Ahora no puedes modificar los puntajes.' AS MENSAJE FROM DUAL;
    END IF;
  
    COMMIT;
    
            
END;
//

DELIMITER ;

 UPDA_ITEM_EVALUACION;
/

-- ----------------------------
-- Function structure for UPDA_PERSONA
-- ----------------------------
DROP PROCEDURE IF EXISTS `UPDA_PERSONA`;

DELIMITER //

CREATE
PROCEDURE `UPDA_PERSONA`()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
        ROLLBACK;
        SET ERR_MSG = SQLCODE;
        OPEN CR_SALIDA FOR
            SELECT '1' AS TIPO, CONCAT('No se logró realizar la actualización. Código del error: ', ERR_MSG) AS MENSAJE FROM DUAL;
    END;

    SELECT PE_USUARIO.ID_PE_PERSONA INTO ID_PE
    FROM PE_USUARIO
    WHERE PE_USUARIO.USU_CORREO = CORREO;

    UPDATE PE_PERSONA
    SET PER_NOMBRES = UPPER(NOMBRES),
    PER_APELLIDOS = UPPER(APELLIDOS),
    PER_TELEFONO = TELEFONO
    WHERE ID_PERSONA = ID_PE;
    
    OPEN CR_SALIDA FOR
            SELECT '3' AS TIPO, 'Datos actualizados correctamente.' AS MENSAJE FROM DUAL;
            
    COMMIT;

            
END;
//

DELIMITER ;

 UPDA_PERSONA;
/

-- ----------------------------
-- Primary Key structure for table PE_ARCHIVO
-- ----------------------------
ALTER TABLE `PE_ARCHIVO` ADD CONSTRAINT `PE_ARCHIVO_PK` PRIMARY KEY (`ID_ARCHIVO`);

-- ----------------------------
-- Checks structure for table PE_ARCHIVO
-- ----------------------------
ALTER TABLE `PE_ARCHIVO` ADD CONSTRAINT `SYS_C0021008` CHECK (`ARC_URL` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_ARCHIVO` ADD CONSTRAINT `SYS_C0021009` CHECK (`ARC_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_ARCHIVO` ADD CONSTRAINT `SYS_C0021018` CHECK (`ID_ARCHIVO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_ARCHIVO` ADD CONSTRAINT `SYS_C0021349` CHECK (`ARC_TIPO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_AREA_TRABAJO
-- ----------------------------
ALTER TABLE `PE_AREA_TRABAJO` ADD CONSTRAINT `PE_AREA_TRABAJO_PK` PRIMARY KEY (`ID_AREA_TRABAJO`);

-- ----------------------------
-- Checks structure for table PE_AREA_TRABAJO
-- ----------------------------
ALTER TABLE `PE_AREA_TRABAJO` ADD CONSTRAINT `SYS_C0020911` CHECK (`ARTR_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_AREA_TRABAJO` ADD CONSTRAINT `SYS_C0020912` CHECK (`ID_AREA_TRABAJO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_DEPENDECIA_PROYECTO
-- ----------------------------
ALTER TABLE `PE_DEPENDECIA_PROYECTO` ADD CONSTRAINT `PE_DEPENDECIA_PROYECTO_PK` PRIMARY KEY (`ID_DEPENDENCIA_PROYECTO`);

-- ----------------------------
-- Checks structure for table PE_DEPENDECIA_PROYECTO
-- ----------------------------
ALTER TABLE `PE_DEPENDECIA_PROYECTO` ADD CONSTRAINT `SYS_C0020951` CHECK (`ID_DEPENDENCIA_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_DEPENDECIA_PROYECTO` ADD CONSTRAINT `SYS_C0020954` CHECK (`DEPR_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_DEPENDECIA_PROYECTO` ADD CONSTRAINT `SYS_C0020955` CHECK (`ID_PE_TIPO_DEPENDENCIA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_EVALUACION
-- ----------------------------
ALTER TABLE `PE_EVALUACION` ADD CONSTRAINT `PE_EVALUACION_PK` PRIMARY KEY (`ID_EVALUACION`);

-- ----------------------------
-- Checks structure for table PE_EVALUACION
-- ----------------------------
ALTER TABLE `PE_EVALUACION` ADD CONSTRAINT `SYS_C0021107` CHECK (`ID_EVALUACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_EVALUACION` ADD CONSTRAINT `SYS_C0021109` CHECK (`ID_PE_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_EVALUACION` ADD CONSTRAINT `SYS_C0021203` CHECK (`ID_PE_PERSONA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_EVALUACION` ADD CONSTRAINT `SYS_C0021211` CHECK (`EVA_ESTADO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_EVALUACION_ITEM
-- ----------------------------
ALTER TABLE `PE_EVALUACION_ITEM` ADD CONSTRAINT `PE_EVALUCACION_ITEM_PK` PRIMARY KEY (`ID_EVALUACION_ITEM`);

-- ----------------------------
-- Checks structure for table PE_EVALUACION_ITEM
-- ----------------------------
ALTER TABLE `PE_EVALUACION_ITEM` ADD CONSTRAINT `SYS_C0021116` CHECK (`ID_EVALUACION_ITEM` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_EVALUACION_ITEM` ADD CONSTRAINT `SYS_C0021118` CHECK (`ID_PE_EVALUACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_EVALUACION_ITEM` ADD CONSTRAINT `SYS_C0021119` CHECK (`ID_PE_ITEM` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Indexes structure for table PE_EVALUACION_ITEM
-- ----------------------------
CREATE UNIQUE INDEX `PE_EVALUACION_ITEM_INDEX1`
  ON `PE_EVALUACION_ITEM` (`ID_PE_EVALUACION` ASC, `ID_PE_ITEM` ASC)
  
PCTFREE 10
INITRANS 2
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
  FLASH_CACHE DEFAULT
)
   USABLE;

-- ----------------------------
-- Primary Key structure for table PE_FACULTAD
-- ----------------------------
ALTER TABLE `PE_FACULTAD` ADD CONSTRAINT `PE_FACULTAD_PK` PRIMARY KEY (`ID_FACULTAD`);

-- ----------------------------
-- Checks structure for table PE_FACULTAD
-- ----------------------------
ALTER TABLE `PE_FACULTAD` ADD CONSTRAINT `SYS_C0021104` CHECK (`ID_FACULTAD` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_FACULTAD` ADD CONSTRAINT `SYS_C0021105` CHECK (`FAC_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_GRUPO_EXTENSION
-- ----------------------------
ALTER TABLE `PE_GRUPO_EXTENSION` ADD CONSTRAINT `PE_GRUPO_EXTENSION_PK` PRIMARY KEY (`ID_GRUPO_EXTENSION`);

-- ----------------------------
-- Checks structure for table PE_GRUPO_EXTENSION
-- ----------------------------
ALTER TABLE `PE_GRUPO_EXTENSION` ADD CONSTRAINT `SYS_C0020875` CHECK (`GREX_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_GRUPO_EXTENSION` ADD CONSTRAINT `SYS_C0020876` CHECK (`ID_GRUPO_EXTENSION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_ITEM
-- ----------------------------
ALTER TABLE `PE_ITEM` ADD CONSTRAINT `PE_ITEM_PK` PRIMARY KEY (`ID_ITEM`);

-- ----------------------------
-- Checks structure for table PE_ITEM
-- ----------------------------
ALTER TABLE `PE_ITEM` ADD CONSTRAINT `SYS_C0021097` CHECK (`ID_ITEM` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_ITEM` ADD CONSTRAINT `SYS_C0021098` CHECK (`ITE_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_OBJETIVOS
-- ----------------------------
ALTER TABLE `PE_OBJETIVOS` ADD CONSTRAINT `PE_OBJETIVOS_PK` PRIMARY KEY (`ID_OBJETIVO`);

-- ----------------------------
-- Checks structure for table PE_OBJETIVOS
-- ----------------------------
ALTER TABLE `PE_OBJETIVOS` ADD CONSTRAINT `SYS_C0020918` CHECK (`ID_PE_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_OBJETIVOS` ADD CONSTRAINT `SYS_C0020920` CHECK (`OBJ_TIPO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_OBJETIVOS` ADD CONSTRAINT `SYS_C0020921` CHECK (`OBJ_DESCRIPCION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_OBJETIVOS` ADD CONSTRAINT `SYS_C0020922` CHECK (`ID_OBJETIVO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PERSONA
-- ----------------------------
ALTER TABLE `PE_PERSONA` ADD CONSTRAINT `PERSONA_PK` PRIMARY KEY (`ID_PERSONA`);

-- ----------------------------
-- Uniques structure for table PE_PERSONA
-- ----------------------------
ALTER TABLE `PE_PERSONA` ADD CONSTRAINT `UNI_PER_CEDULA` UNIQUE (`PER_CEDULA`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table PE_PERSONA
-- ----------------------------
ALTER TABLE `PE_PERSONA` ADD CONSTRAINT `SYS_C0020900` CHECK (`PER_CEDULA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PERSONA` ADD CONSTRAINT `SYS_C0020901` CHECK (`PER_APELLIDOS` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PERSONA` ADD CONSTRAINT `SYS_C0020902` CHECK (`PER_NOMBRES` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PERSONA` ADD CONSTRAINT `SYS_C0020903` CHECK (`ID_PERSONA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PERSONA_PROGRAMA
-- ----------------------------
ALTER TABLE `PE_PERSONA_PROGRAMA` ADD CONSTRAINT `PE_PERSONA_PROGRAMA_PK` PRIMARY KEY (`ID_PERSONA_PROGRAMA`);

-- ----------------------------
-- Checks structure for table PE_PERSONA_PROGRAMA
-- ----------------------------
ALTER TABLE `PE_PERSONA_PROGRAMA` ADD CONSTRAINT `SYS_C0021133` CHECK (`ID_PERSONA_PROGRAMA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PERSONA_PROGRAMA` ADD CONSTRAINT `SYS_C0021134` CHECK (`ID_PE_PERSONA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PERSONA_PROGRAMA` ADD CONSTRAINT `SYS_C0021135` CHECK (`ID_PE_PROGRAMA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_POBLACION
-- ----------------------------
ALTER TABLE `PE_POBLACION` ADD CONSTRAINT `PE_POBLACION_PK` PRIMARY KEY (`ID_POBLACION`);

-- ----------------------------
-- Checks structure for table PE_POBLACION
-- ----------------------------
ALTER TABLE `PE_POBLACION` ADD CONSTRAINT `SYS_C0020892` CHECK (`POB_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_POBLACION` ADD CONSTRAINT `SYS_C0020893` CHECK (`ID_POBLACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_POBLACION_CICLO
-- ----------------------------
ALTER TABLE `PE_POBLACION_CICLO` ADD CONSTRAINT `PE_POBLACION_CICLO_PK` PRIMARY KEY (`ID_POBLACION_CICLO`);

-- ----------------------------
-- Checks structure for table PE_POBLACION_CICLO
-- ----------------------------
ALTER TABLE `PE_POBLACION_CICLO` ADD CONSTRAINT `SYS_C0020905` CHECK (`POCI_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_POBLACION_CICLO` ADD CONSTRAINT `SYS_C0020906` CHECK (`ID_POBLACION_CICLO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_POBLACION_CONDICION
-- ----------------------------
ALTER TABLE `PE_POBLACION_CONDICION` ADD CONSTRAINT `PE_POBLACION_CONDICION_PK` PRIMARY KEY (`ID_POBLACION_CONDICION`);

-- ----------------------------
-- Checks structure for table PE_POBLACION_CONDICION
-- ----------------------------
ALTER TABLE `PE_POBLACION_CONDICION` ADD CONSTRAINT `SYS_C0020853` CHECK (`POCO_NOMRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_POBLACION_CONDICION` ADD CONSTRAINT `SYS_C0020854` CHECK (`ID_POBLACION_CONDICION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_POBLACION_GRUPOS
-- ----------------------------
ALTER TABLE `PE_POBLACION_GRUPOS` ADD CONSTRAINT `PE_POBLACION_GRUPOS_PK` PRIMARY KEY (`ID_POBLACION_GRUPOS`);

-- ----------------------------
-- Checks structure for table PE_POBLACION_GRUPOS
-- ----------------------------
ALTER TABLE `PE_POBLACION_GRUPOS` ADD CONSTRAINT `SYS_C0020908` CHECK (`POGR_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_POBLACION_GRUPOS` ADD CONSTRAINT `SYS_C0020909` CHECK (`ID_POBLACION_GRUPOS` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PROGRAMA
-- ----------------------------
ALTER TABLE `PE_PROGRAMA` ADD CONSTRAINT `PE_PROGRAMA_PK` PRIMARY KEY (`ID_PROGRAMA`);

-- ----------------------------
-- Checks structure for table PE_PROGRAMA
-- ----------------------------
ALTER TABLE `PE_PROGRAMA` ADD CONSTRAINT `SYS_C0021100` CHECK (`ID_PROGRAMA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROGRAMA` ADD CONSTRAINT `SYS_C0021101` CHECK (`PRO_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROGRAMA` ADD CONSTRAINT `SYS_C0021102` CHECK (`ID_PE_FACULTAD` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PROYECTO
-- ----------------------------
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `PE_PROYECTO_PK` PRIMARY KEY (`ID_PROYECTO`);

-- ----------------------------
-- Checks structure for table PE_PROYECTO
-- ----------------------------
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020878` CHECK (`ID_PE_POBLACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020879` CHECK (`ID_PE_GRUPO_EXTENSION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020881` CHECK (`ID_COORDINADOR` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020882` CHECK (`PRO_RESULTADOS_ESPERADOS` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020883` CHECK (`PRO_COMPONENTE_INNOVADOR` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020888` CHECK (`PRO_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020890` CHECK (`ID_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0020956` CHECK (`ID_PE_DEPENDENCIA_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0021020` CHECK (`PRO_ELIMINADO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0021089` CHECK (`PRO_PLANTEAMIENTO_PROBLEMA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0021090` CHECK (`PRO_JUSTIFICACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0021092` CHECK (`PRO_METODOLOGIA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0021194` CHECK (`PRO_FECHA_PRESENTACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0021195` CHECK (`PRO_FECHA_INICIO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `SYS_C0021196` CHECK (`PRO_FECHA_FIN` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Indexes structure for table PE_PROYECTO
-- ----------------------------
CREATE UNIQUE INDEX `PE_PROYECTO_INDEX1`
  ON `PE_PROYECTO` (`PRO_NOMBRE` ASC, `ID_COORDINADOR` ASC)
  
PCTFREE 10
INITRANS 2
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
  FLASH_CACHE DEFAULT
)
   USABLE;

-- ----------------------------
-- Primary Key structure for table PE_PROYECTO_ARTR
-- ----------------------------
ALTER TABLE `PE_PROYECTO_ARTR` ADD CONSTRAINT `PE_PROYECTO_ARTR_PK` PRIMARY KEY (`ID_PRAR`, `ID_PE_PROYECTO`);

-- ----------------------------
-- Checks structure for table PE_PROYECTO_ARTR
-- ----------------------------
ALTER TABLE `PE_PROYECTO_ARTR` ADD CONSTRAINT `SYS_C0020870` CHECK (`PRAR_ESTADO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_ARTR` ADD CONSTRAINT `SYS_C0020871` CHECK (`ID_PE_AREA_TRABAJO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_ARTR` ADD CONSTRAINT `SYS_C0020872` CHECK (`ID_PE_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_ARTR` ADD CONSTRAINT `SYS_C0020873` CHECK (`ID_PRAR` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PROYECTO_PERSONA
-- ----------------------------
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `PE_PROYECTO_PERSONA_PK` PRIMARY KEY (`ID_PROYECTO_PERSONA`);

-- ----------------------------
-- Checks structure for table PE_PROYECTO_PERSONA
-- ----------------------------
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `SYS_C0020849` CHECK (`ID_PE_PERSONA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `SYS_C0020850` CHECK (`ID_PE_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `SYS_C0020851` CHECK (`ID_PROYECTO_PERSONA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `SYS_C0021157` CHECK (`ID_PE_TIPO_VINCULACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PROYECTO_POCI
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POCI` ADD CONSTRAINT `PE_PROYECTO_POCI_PK` PRIMARY KEY (`ID_PROYECTO_POCI`);

-- ----------------------------
-- Checks structure for table PE_PROYECTO_POCI
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POCI` ADD CONSTRAINT `SYS_C0020914` CHECK (`PRPO_ESTADO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCI` ADD CONSTRAINT `SYS_C0020915` CHECK (`ID_PE_POBLACION_CICLO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCI` ADD CONSTRAINT `SYS_C0020916` CHECK (`ID_PE_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCI` ADD CONSTRAINT `SYS_C0020917` CHECK (`ID_PROYECTO_POCI` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PROYECTO_POCO
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POCO` ADD CONSTRAINT `PE_PROYECTO_POCO_PK` PRIMARY KEY (`ID_PROYECTO_POCO`);

-- ----------------------------
-- Checks structure for table PE_PROYECTO_POCO
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POCO` ADD CONSTRAINT `SYS_C0020856` CHECK (`PRPO_ESTADO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCO` ADD CONSTRAINT `SYS_C0020857` CHECK (`ID_PE_POBLACION_CONDICION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCO` ADD CONSTRAINT `SYS_C0020858` CHECK (`ID_PE_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCO` ADD CONSTRAINT `SYS_C0020859` CHECK (`ID_PROYECTO_POCO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_PROYECTO_POGR
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POGR` ADD CONSTRAINT `PE_PROYECTO_POGR_PK` PRIMARY KEY (`ID_PROYECTO_POGR`);

-- ----------------------------
-- Checks structure for table PE_PROYECTO_POGR
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POGR` ADD CONSTRAINT `SYS_C0020927` CHECK (`PRPO_ESTADO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POGR` ADD CONSTRAINT `SYS_C0020928` CHECK (`ID_PE_POBLACION_GRUPOS` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POGR` ADD CONSTRAINT `SYS_C0020929` CHECK (`ID_PE_PROYECTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POGR` ADD CONSTRAINT `SYS_C0020930` CHECK (`ID_PROYECTO_POGR` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_ROL
-- ----------------------------
ALTER TABLE `PE_ROL` ADD CONSTRAINT `PE_ROL_PK` PRIMARY KEY (`ID_ROL`);

-- ----------------------------
-- Checks structure for table PE_ROL
-- ----------------------------
ALTER TABLE `PE_ROL` ADD CONSTRAINT `SYS_C0020924` CHECK (`ROL_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_ROL` ADD CONSTRAINT `SYS_C0020925` CHECK (`ID_ROL` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_TIPO_DEPENDENCIA
-- ----------------------------
ALTER TABLE `PE_TIPO_DEPENDENCIA` ADD CONSTRAINT `PE_TIPO_DEPENDENCIA_PK` PRIMARY KEY (`ID_TIPO_DEPENDENCIA`);

-- ----------------------------
-- Checks structure for table PE_TIPO_DEPENDENCIA
-- ----------------------------
ALTER TABLE `PE_TIPO_DEPENDENCIA` ADD CONSTRAINT `SYS_C0020949` CHECK (`ID_TIPO_DEPENDENCIA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_TIPO_DOCUMENTO
-- ----------------------------
ALTER TABLE `PE_TIPO_DOCUMENTO` ADD CONSTRAINT `PE_TIPO_ARCHIVO_PK` PRIMARY KEY (`ID_TIPO_DOCUMENTO`);

-- ----------------------------
-- Checks structure for table PE_TIPO_DOCUMENTO
-- ----------------------------
ALTER TABLE `PE_TIPO_DOCUMENTO` ADD CONSTRAINT `SYS_C0021362` CHECK (`ID_TIPO_DOCUMENTO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_TIPO_DOCUMENTO` ADD CONSTRAINT `SYS_C0021363` CHECK (`TIDO_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_TIPO_VINCULACION
-- ----------------------------
ALTER TABLE `PE_TIPO_VINCULACION` ADD CONSTRAINT `PE_TIPO_VINCULACION_PK` PRIMARY KEY (`ID_TIPO_VINCULACION`);

-- ----------------------------
-- Checks structure for table PE_TIPO_VINCULACION
-- ----------------------------
ALTER TABLE `PE_TIPO_VINCULACION` ADD CONSTRAINT `SYS_C0020895` CHECK (`TIVI_NOMBRE` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_TIPO_VINCULACION` ADD CONSTRAINT `SYS_C0020896` CHECK (`ID_TIPO_VINCULACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PE_USUARIO
-- ----------------------------
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `PE_USUARIO_PK` PRIMARY KEY (`ID_USUARIO`);

-- ----------------------------
-- Uniques structure for table PE_USUARIO
-- ----------------------------
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `UNI_USU_CORREO` UNIQUE (`USU_CORREO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table PE_USUARIO
-- ----------------------------
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `SYS_C0020860` CHECK (`USU_ACTIVACION` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `SYS_C0020861` CHECK (`ID_PE_ROL` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `SYS_C0020862` CHECK (`USU_ESTADO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `SYS_C0020865` CHECK (`ID_PE_PERSONA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `SYS_C0020866` CHECK (`USU_CONTRASENA` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `SYS_C0020867` CHECK (`USU_CORREO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `SYS_C0020868` CHECK (`ID_USUARIO` IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_ARCHIVO
-- ----------------------------
ALTER TABLE `PE_ARCHIVO` ADD CONSTRAINT `PE_ARCHIVO_FK1` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_ARCHIVO` ADD CONSTRAINT `PE_ARCHIVO_FK2` FOREIGN KEY (`ID_PE_TIPO_DOCUMENTO`) REFERENCES `PE_TIPO_DOCUMENTO` (`ID_TIPO_DOCUMENTO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_DEPENDECIA_PROYECTO
-- ----------------------------
ALTER TABLE `PE_DEPENDECIA_PROYECTO` ADD CONSTRAINT `PE_DEPENDECIA_PROYECTO_FK1` FOREIGN KEY (`ID_PE_TIPO_DEPENDENCIA`) REFERENCES `PE_TIPO_DEPENDENCIA` (`ID_TIPO_DEPENDENCIA`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_EVALUACION
-- ----------------------------
ALTER TABLE `PE_EVALUACION` ADD CONSTRAINT `PE_EVALUACION_FK1` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_EVALUACION` ADD CONSTRAINT `PE_EVALUACION_FK2` FOREIGN KEY (`ID_PE_PERSONA`) REFERENCES `PE_PERSONA` (`ID_PERSONA`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_EVALUACION_ITEM
-- ----------------------------
ALTER TABLE `PE_EVALUACION_ITEM` ADD CONSTRAINT `PE_EVALUACION_ITEM_FK1` FOREIGN KEY (`ID_PE_ITEM`) REFERENCES `PE_ITEM` (`ID_ITEM`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_EVALUACION_ITEM` ADD CONSTRAINT `PE_EVALUCACION_ITEM_FK1` FOREIGN KEY (`ID_PE_EVALUACION`) REFERENCES `PE_EVALUACION` (`ID_EVALUACION`) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_OBJETIVOS
-- ----------------------------
ALTER TABLE `PE_OBJETIVOS` ADD CONSTRAINT `PE_OBJETIVOS_FK1` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PERSONA_PROGRAMA
-- ----------------------------
ALTER TABLE `PE_PERSONA_PROGRAMA` ADD CONSTRAINT `PE_PERSONA_PROGRAMA_FK1` FOREIGN KEY (`ID_PE_PERSONA`) REFERENCES `PE_PERSONA` (`ID_PERSONA`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PERSONA_PROGRAMA` ADD CONSTRAINT `PE_PERSONA_PROGRAMA_FK2` FOREIGN KEY (`ID_PE_PROGRAMA`) REFERENCES `PE_PROGRAMA` (`ID_PROGRAMA`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PROGRAMA
-- ----------------------------
ALTER TABLE `PE_PROGRAMA` ADD CONSTRAINT `PE_PROGRAMA_FK1` FOREIGN KEY (`ID_PE_FACULTAD`) REFERENCES `PE_FACULTAD` (`ID_FACULTAD`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PROYECTO
-- ----------------------------
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `PE_PROYECTO_FK1` FOREIGN KEY (`ID_COORDINADOR`) REFERENCES `PE_PERSONA` (`ID_PERSONA`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `PE_PROYECTO_FK3` FOREIGN KEY (`ID_PE_GRUPO_EXTENSION`) REFERENCES `PE_GRUPO_EXTENSION` (`ID_GRUPO_EXTENSION`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `PE_PROYECTO_FK4` FOREIGN KEY (`ID_PE_POBLACION`) REFERENCES `PE_POBLACION` (`ID_POBLACION`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO` ADD CONSTRAINT `PE_PROYECTO_FK5` FOREIGN KEY (`ID_PE_DEPENDENCIA_PROYECTO`) REFERENCES `PE_DEPENDECIA_PROYECTO` (`ID_DEPENDENCIA_PROYECTO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PROYECTO_ARTR
-- ----------------------------
ALTER TABLE `PE_PROYECTO_ARTR` ADD CONSTRAINT `PE_PROYECTO_ARTR_FK1` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_ARTR` ADD CONSTRAINT `PE_PROYECTO_ARTR_FK2` FOREIGN KEY (`ID_PE_AREA_TRABAJO`) REFERENCES `PE_AREA_TRABAJO` (`ID_AREA_TRABAJO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PROYECTO_PERSONA
-- ----------------------------
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `PE_PROYECTO_PERSONA_FK1` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `PE_PROYECTO_PERSONA_FK2` FOREIGN KEY (`ID_PE_PERSONA`) REFERENCES `PE_PERSONA` (`ID_PERSONA`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_PERSONA` ADD CONSTRAINT `PE_PROYECTO_PERSONA_FK3` FOREIGN KEY (`ID_PE_TIPO_VINCULACION`) REFERENCES `PE_TIPO_VINCULACION` (`ID_TIPO_VINCULACION`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PROYECTO_POCI
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POCI` ADD CONSTRAINT `PE_PROYECTO_POCI_FK1` FOREIGN KEY (`ID_PE_POBLACION_CICLO`) REFERENCES `PE_POBLACION_CICLO` (`ID_POBLACION_CICLO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCI` ADD CONSTRAINT `PE_PROYECTO_POCI_FK2` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PROYECTO_POCO
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POCO` ADD CONSTRAINT `PE_PROYECTO_POCO_FK1` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POCO` ADD CONSTRAINT `PE_PROYECTO_POCO_FK2` FOREIGN KEY (`ID_PE_POBLACION_CONDICION`) REFERENCES `PE_POBLACION_CONDICION` (`ID_POBLACION_CONDICION`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_PROYECTO_POGR
-- ----------------------------
ALTER TABLE `PE_PROYECTO_POGR` ADD CONSTRAINT `PE_PROYECTO_POGR_FK1` FOREIGN KEY (`ID_PE_PROYECTO`) REFERENCES `PE_PROYECTO` (`ID_PROYECTO`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_PROYECTO_POGR` ADD CONSTRAINT `PE_PROYECTO_POGR_FK2` FOREIGN KEY (`ID_PE_POBLACION_GRUPOS`) REFERENCES `PE_POBLACION_GRUPOS` (`ID_POBLACION_GRUPOS`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table PE_USUARIO
-- ----------------------------
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `PE_USUARIO_FK1` FOREIGN KEY (`ID_PE_PERSONA`) REFERENCES `PE_PERSONA` (`ID_PERSONA`) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE `PE_USUARIO` ADD CONSTRAINT `PE_USUARIO_FK2` FOREIGN KEY (`ID_PE_ROL`) REFERENCES `PE_ROL` (`ID_ROL`) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
